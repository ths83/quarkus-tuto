mp.messaging.outgoing.outgoing-costs.connector=quarkus-http
# here we are using a URL pointing to a test endpoint
# you can use e.g. an environment variable to change it
mp.messaging.outgoing.outgoing-costs.url=http://localhost:${quarkus.http.port}/cost-collector
# POST is the default method. Another possibility is PUT
mp.messaging.outgoing.outgoing-costs.method=POST
mp.messaging.incoming.incoming-costs.connector=quarkus-http
# the incoming-costs channel will be fed via an endpoint on the `/costs` path
mp.messaging.incoming.incoming-costs.path=/costs
# POST is the default method. Another possibility is PUT
mp.messaging.incoming.incoming-costs.method=POST
# NOT WORKING
# OUTGOING
# The target URL
mp.messaging.outgoing.outgoing-costs.url=http://localhost:8213
# Message payload serializer, optional, implementation of `io.quarkus.reactivemessaging.http.runtime.serializers.Serializer`
mp.messaging.outgoing.outgoing-costs.serializer=com.example.MySerializer
# The number of attempts to make for sending a request to a remote endpoint. Must not be less than zero
# Zero by default
mp.messaging.outgoing.outgoing-costs.maxRetries=3
# Configures the random factor when using back-off with maxRetries > 0. 0.5 by default
mp.messaging.outgoing.outgoing-costs.jitter=0.3
# Configures a back-off delay between attempts to send a request.
# A random factor (jitter) is applied to increase the delay when several failures happen.
mp.messaging.outgoing.outgoing-costs.delay=1s
#The HTTP method (either `POST` or `PUT`), `POST` by default
mp.messaging.outgoing.outgoing-costs.method=PUT
#INCOMING
# The HTTP method (either `POST` or `PUT`, `POST` by default
mp.messaging.incoming.outgoing-costs.method=POST
# The path of the endpoint
mp.messaging.incoming.outgoing-costs.path=/my-reactive-ws-endpoint
# HTTP endpoint buffers messages if a consumer is not able to keep up. This setting specifies the size of the buffer.
# 8 by default.
mp.messaging.incoming.outgoing-costs.buffer-size=13